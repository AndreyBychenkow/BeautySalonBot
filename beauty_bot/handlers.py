from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from bot.models import Procedure
from datetime import datetime
from keyboards import (
    get_main_menu_keyboard,
    get_salon_keyboard,
    get_procedure_keyboard,
    get_time_slots_keyboard,
    get_date_keyboard,
    get_master_keyboard
)

USER_DATA = {}

PROCEDURE_TRANSLATIONS = {
    "cut": "–°—Ç—Ä–∏–∂–∫–∞",
    "manicure": "–ú–∞–Ω–∏–∫—é—Ä",
    "pedicure": "–ü–µ–¥–∏–∫—é—Ä",
    "color": "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å",
    "facial": "–£—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º",
    "waxing": "–≠–ø–∏–ª—è—Ü–∏—è",
    "massage": "–ú–∞—Å—Å–∞–∂"
}

PROCEDURE_PRICES = {
    "–°—Ç—Ä–∏–∂–∫–∞": 1000,
    "–ú–∞–Ω–∏–∫—é—Ä": 1500,
    "–ü–µ–¥–∏–∫—é—Ä": 1200,
    "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å": 2500,
    "–£—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º": 2000,
    "–≠–ø–∏–ª—è—Ü–∏—è": 800,
    "–ú–∞—Å—Å–∞–∂": 1800
}

SALONS = {
    "1": "–°–∞–ª–æ–Ω '–ß–µ–ª–∫–∞'",
    "2": "–°–∞–ª–æ–Ω '–°—Ç–∏–ª—è–≥–∞'",
    "3": "–°–∞–ª–æ–Ω '–ì–∞—Ä–º–æ–Ω–∏—è'",
    "4": "–°–∞–ª–æ–Ω '–≠–ª–µ–≥–∞–Ω—Å'",
    "5": "–°–∞–ª–æ–Ω '–ö—Ä–∞—Å–∞'",
    "6": "–°–∞–ª–æ–Ω '–°—Ç–∏–ª—å'"
}

MASTERS = {
    "1": "–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
    "2": "–ù–∞–¥–µ–∂–¥–∞ –õ–∏—Ç–≤–∏–Ω–∞",
    "3": "–õ–∞—Ä–∏—Å–∞ –ù–æ–≤–∏–∫–æ–≤–∞",
    "4": "–°–≤–µ—Ç–ª–∞–Ω–∞ –õ–∞—Ä–∏–Ω–∞",
    "5": "–õ—é–±–æ–≤—å –ú–∞–∫–µ–µ–≤–∞",
    "6": "–¢–∞—Ç—å—è–Ω–∞ –°–º–µ–ª–æ–≤–∞"
}


def format_procedure_prices(prices):
    message = "–¶–µ–Ω—ã –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:\n\n"
    for procedure, price in prices.items():
        message += f"- {procedure}: {price} —Ä—É–±–ª–µ–π\n"
    return message.strip()


def button_handler(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id

    if query.data == "agree":
        USER_DATA[chat_id] = {"agreed": True}
        message = "–°–ø–∞—Å–∏–±–æ! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:"
        reply_markup = get_main_menu_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data == "show_prices":
        message = format_procedure_prices(PROCEDURE_PRICES)
        context.bot.send_message(chat_id=chat_id, text=message)

    elif query.data == "disagree":
        context.bot.send_message(chat_id=chat_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è.")

    elif query.data == "salon":
        message = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:"
        reply_markup = get_salon_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("salon_"):
        salon_id = query.data.split("_")[1]
        USER_DATA[chat_id]["salon"] = salon_id
        message = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–ª–æ–Ω. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
        keyboard = [
            [InlineKeyboardButton("üñã –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="choose_procedure")],
            [InlineKeyboardButton("üìà –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã", callback_data="show_prices")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="salon")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data == "choose_procedure":
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:"
        reply_markup = get_procedure_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("procedure_"):
        procedure_id = query.data.split("_")
        USER_DATA[chat_id]["procedure"] = procedure_id
        procedure_name = Procedure.objects.get(id=procedure_id[-1])
        message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É '{procedure_name}'. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="choose_time")],
            [InlineKeyboardButton("üìâ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã", callback_data="show_prices")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="choose_procedure")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data == "choose_time":
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:"
        reply_markup = get_date_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("time_"):
        time_slot = query.data.split("_")[1]
        USER_DATA[chat_id]["time"] = time_slot
        message = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."
        context.bot.send_message(chat_id=chat_id, text=message)

    elif query.data == "master":
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:"
        reply_markup = get_master_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("master_"):
        master_id = query.data.split("_")
        USER_DATA[chat_id]["master"] = master_id
        message = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:"
        reply_markup = get_procedure_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("date_"):
        raw_date = query.data.split("_")[1]
        date = datetime.strptime(raw_date, "%Y-%m-%d").date()
        USER_DATA[chat_id]["date"] = date
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:"
        reply_markup = get_time_slots_keyboard(chat_id)
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("time_"):
        time_slot = query.data.split("_")[1]
        USER_DATA[chat_id]["time"] = time_slot
        message = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."
        context.bot.send_message(chat_id=chat_id, text=message)

    elif query.data == "call_admin":
        message = "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ –Ω–æ–º–µ—Ä—É:\n +7 (123) 456-78-90"
        context.bot.send_message(chat_id=chat_id, text=message)


def phone_handler(update, context):
    global confirmation_message
    chat_id = update.message.chat_id
    phone = update.message.text
    USER_DATA[chat_id]["phone"] = phone

    procedure = USER_DATA[chat_id]["procedure"]
    time_slot = USER_DATA[chat_id]["time"]
    date = USER_DATA[chat_id].get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞")
    procedure_russian = PROCEDURE_TRANSLATIONS.get(procedure, procedure)

    if "salon" in USER_DATA[chat_id] and "master" not in USER_DATA[chat_id]:
        salon_id = USER_DATA[chat_id]["salon"]
        salon_name = SALONS.get(salon_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–ª–æ–Ω")
        confirmation_message = (
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
            f"–°–∞–ª–æ–Ω: '{salon_name}'\n"
            f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure_russian}\n"
            f"–î–∞—Ç–∞: {date}\n"
            f"–í—Ä–µ–º—è: {time_slot}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            "–ñ–¥—ë–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n"
        )
    elif "master" in USER_DATA[chat_id]:
        master_id = USER_DATA[chat_id]["master"]
        master_name = MASTERS.get(master_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä")
        confirmation_message = (
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
            f"–ú–∞—Å—Ç–µ—Ä: {master_name}\n"
            f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure_russian}\n"
            f"–î–∞—Ç–∞: {date}\n"
            f"–í—Ä–µ–º—è: {time_slot}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            "–ñ–¥—ë–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n"
        )

    context.bot.send_message(chat_id=chat_id, text=confirmation_message)
