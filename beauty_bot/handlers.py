from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from bot.models import Procedure, Appointment
from datetime import datetime
from datetime import timedelta
from keyboards import (
    get_main_menu_keyboard,
    get_salon_keyboard,
    get_procedure_keyboard,
    get_time_slots_keyboard,
    get_date_keyboard,
    get_master_keyboard
)

USER_DATA = {}


def format_procedure_prices():
    procedures = Procedure.objects.all()
    message = "–¶–µ–Ω—ã –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:\n\n"
    for procedure in procedures:
        message += f"- üå∫{procedure.name}: {procedure.price} —Ä—É–±–ª–µ–π\n"
    return message.strip()


def button_handler(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id

    if query.data == "agree":
        USER_DATA[chat_id] = {"agreed": True}
        message = "–°–ø–∞—Å–∏–±–æ! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:"
        reply_markup = get_main_menu_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data == "show_prices":
        message = format_procedure_prices()
        context.bot.send_message(chat_id=chat_id, text=message)

    elif query.data == "disagree":
        context.bot.send_message(chat_id=chat_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è.")

    elif query.data == "salon":
        message = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:"
        reply_markup = get_salon_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("salon_"):
        salon_id = query.data.split("_")[1]
        USER_DATA[chat_id]["salon"] = salon_id
        message = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–ª–æ–Ω. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
        keyboard = [
            [InlineKeyboardButton("üñã –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="choose_procedure")],
            [InlineKeyboardButton("üìà –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã", callback_data="show_prices")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="salon")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data == "choose_procedure":
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:"
        reply_markup = get_procedure_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("procedure_"):
        procedure_id = query.data.split("_")[-1]
        USER_DATA[chat_id]["procedure"] = procedure_id
        procedure_name = Procedure.objects.get(id=procedure_id).name
        message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É '{procedure_name}'. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="choose_time")],
            [InlineKeyboardButton("üìâ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã", callback_data="show_prices")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="choose_procedure")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data == "choose_time":
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:"
        reply_markup = get_date_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("time_"):

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ callback_data
            _, raw_date, raw_time = query.data.split("_")
            USER_DATA[chat_id]["date"] = raw_date
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç time
            time_obj = datetime.strptime(raw_time, "%H:%M").time()
            USER_DATA[chat_id]["time"] = time_obj
            USER_DATA[chat_id]["start_time"] = time_obj
            # –í—ã—á–∏—Å–ª—è–µ–º end_time
            end_datetime = datetime.combine(datetime.today(), time_obj) + timedelta(hours=1)
            USER_DATA[chat_id]["end_time"] = end_datetime.time()

            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {raw_date} –∏ –≤—Ä–µ–º—è {raw_time}. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."
            context.bot.send_message(chat_id=chat_id, text=message)
        except ValueError as e:
            context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")

    elif query.data == "master":
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:"
        reply_markup = get_master_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("master_"):
        master_id = query.data.split("_")[-1]
        USER_DATA[chat_id]["master"] = master_id
        message = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:"
        reply_markup = get_procedure_keyboard()
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data.startswith("date_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        raw_date = query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        USER_DATA[chat_id]["date"] = raw_date  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
        message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {raw_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:"
        reply_markup = get_time_slots_keyboard(chat_id)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

    elif query.data == "call_admin":
        message = "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ –Ω–æ–º–µ—Ä—É:\n +7 (123) 456-78-90"
        context.bot.send_message(chat_id=chat_id, text=message)


def phone_handler(update, context):
    chat_id = update.message.chat_id
    phone = update.message.text
    USER_DATA[chat_id]["phone"] = phone

    # Save appointment in the database
    salon_id = USER_DATA[chat_id].get("salon")
    specialist_id = USER_DATA[chat_id].get("master")
    procedure_id = USER_DATA[chat_id].get("procedure")
    date = USER_DATA[chat_id].get("date")
    time = USER_DATA[chat_id].get("time")
    start_time = USER_DATA[chat_id].get("start_time")
    end_time = USER_DATA[chat_id].get("end_time")

    appointment = Appointment.objects.create(
        salon_id=salon_id,
        specialist_id=specialist_id,
        procedure_id=procedure_id,
        date=date,
        time=time,
        client_name=update.message.chat.first_name,
        client_phone=phone,
        start_time=start_time,
        end_time=end_time
    )

    context.bot.send_message(chat_id=chat_id, text="‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

